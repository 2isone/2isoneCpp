#include<iostream>

using namespace std;

void main()
{
	int arr[10] = {};
	
	for (int i = 0; i < 10; i++) //배열의 초기화
	{
		arr[i] = i;
	}

	for (int i = 0; i < 10; i++) //출력
	{
		//cout << "arr[" << i << "] = " << arr[i] << endl;
		printf("arr[%d] = %d\n", i, arr[i]);
	}

	srand(time(NULL));

	for (int i = 0; i < 100000; i++)
	{
		int index1 = rand() % 10;
		int index2 = rand() % 10;

		int temp = arr[index1];
		arr[index1] = arr[index2];
		arr[index2] = temp;
	}

	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j < 10; j++)
		{
			cout << "[" << i << " " << j << "]" << " ";
		}
	}
}

/*
	for문 + 배열
	배열의 초기화는 보통 for문을 돌면서 각 변수에 맞는 값을 넣어주는 식으로 진행됨

	두 인덱스를 잡고 서로 스왑하는 걸 10만 번 정도 반복하면
	배열 자체를 랜덤으로 섞는 효과를 낼 수 있음

	반복문 안에 반복문 (2중 for문)
	
	왜 항상 i로 시작하나요? int니까 integer의 약자 i인 것
	보통 2중 for문에선 1차는 int i, 2차는 int j 사용 (i 다음 알파벳이 j라서)
*/

/*
	숙제
	1. 로또 번호 생성기
	2. 가위바위보 하나 빼기

	아직 프로그래밍이 좀 어렵다고 느껴진다면
	오늘 가위바위보 풀이한 거 타임어택 할 수 있을 정도로 외우기

	프로그래밍은 에피소드 형식이 아님
	한번 놓치면 따라갈 수 없으므로 지금도 어렵다 싶으면
	10분 내로 저 코드를 다 입력할 수 있을 정도로 달달 외우기

	프로그래밍에서 재능이 발휘되려면 5년차 이상은 되어야 함
	그 전까지는 많이 한 사람이 잘하는 구조

	프로그래밍은 대체로 암기, 내가 생각한 걸 코드로 옮기는 훈련
	
	숙제 진짜 정 못하겠다 하면 가위바위보 숙제풀이 암기하기
	암기하다보면 더 좋은 코드를 짤 수 있을 것 같다는 자신감이 붙는데, 그럼 그때부터 코딩해도 됨
*/