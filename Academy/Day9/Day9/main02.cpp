#include<iostream>
#define USER_COUNT 3;

using namespace std;

void main()
{
	int a = 3;

	new int();
	
	int* myPointer = nullptr;
	myPointer = new int();

	int userCount = 10;
	int arr[USER_COUNT];

	int* arr = new int[userCount];
	arr[0] = 3;
	arr[9] = 10;

	delete[] arr;


}

/*
	상단에 헤더파일이 늘어나면 어떻게 되나? 컴퓨터가 읽을 내용이 많아지므로 빌드 시간이 늘어남
	빌드 시간이란? F5를 눌러 프로그램이 시작될 때, 프로그램이 시작되기까지 걸리는 시간

	F5를 누를 때, 컴퓨터에서 발생하는 내용
	F5 - 디버깅 시작
	빌드 > 디버깅

	컴퓨터 입장에서는 프로그래머가 짠 코드를 실행 시키는 게 아님
	빌드라는 과정은 exe(실행파일)을 만드는 과정
	컴퓨터 입장에선 단순히 exe를 실행시키는 것

	코드 빌드 > exe 파일
	대체 어떻게 만들어지는 것인가?

	나중엔 안드로이드, Mac Os, Web 등 여러가지를 만들어야 하는데,
	일단 exe는 Windows용임

	컴퓨터가 처음부터 C++, C#, JAVA 이런 언어를 알고 있는 게 아니라
	어셈블리 명령어 < 이거 하나만 알고 있음

	C++, C#, JAVA로 코딩하면 > 어셈블리 명령어로 바꿔주는 기능을 하는 게 Visual Studio의 빌드 기능

	exe 파일에 어떻게 실행한 건지 어셈블리 명령어로 쭉 써두고
	실행시키면 exe 파일을 읽는데
	코드를 빌드해야 exe 파일이 나옴
	빌드할 때, 룰을 정해서 exe를 만드는데 이게 CPU칩에 따라 룰을 달리함
	window에서는 32비트용, 64비트용, Mac으로 가면 Intel용, 실리콘용
	CPU에 의해서만 고르게 되어있고, 다른 그래픽 카드나 RAM 카드에 따라서 사양을 고르진 않음

	exe 를 실행하면 메모리 공간이 4개로 쪼개짐
	코드 영역, 데이터 영역, Heap 영역, Stack 영역

	코드 영역 - 어셈블리 명령어를 기억함
	데이터 영역 - 전역 변수, static 변수 같은 내용을 기억
	Heap 영역 - 동적 할당할 때 쓰는 메모리 공간 (기본적으로 느림, 보통 무거운 데이터를 넣음)
	Stack 영역 - 정작 할당할 때 쓰는 메모리 공간 (기본적으로 빠름, 보통 가벼운 데이터를 넣음)
	
*/

/*
	1. 동적 할당
	메모리 공간 4개 - 코드, 데이터, 힙, 스택
	데이터 - 전역변수 (메인 함수 밖에 선언된 변수)
	스택 - 지역변수 (함수 내에 선언된 변수), 개발자가 삭제에 관여할 수 없음, 중괄호가 끝나면 알아서 삭제됨
	힙 - 생성과 삭제를 개발자가 제어할 수 있음

	new 자료형();
	4바이트 int형 메모리 생성, RAM에 만들어진 게 끝
	기본적으로 포인터가 전달됨
	동적 할당을 할 때는 포인터와 같이 사용함

	new int() > RAM에 4byte int형 메모리가 생성되었고, 그 주소를 myPointer 가 인수 받았다.

	1. 동적 할당 하는 방법
	- new 자료형 ();
	- 주소 값이 나오기 때문에 항상 포인터로 받아줘야함
	- int* myPointer = new int();

	2. 동적 할당 삭제하는 방법
	- delete 주소값
	- 

	언제 생성과 삭제를 제어해야 할지도 모르겠고, 왜 해야 하는지도 모르겠음 > 그럼 왜 배우나?
	배열이 추가되면 재밌어진다(?)

	동적 배열
	프로그램이 실행되는 도중에, 배열 크기를 지정해서 선언하는 방법

	#define 이름 > 변수가 아니라 매크로
	int arr[매크로 이름]; < 정적 배열

	동적 배열 사용하는 방법
	포인터 = 배열
	int* arr = new int[userCount];

	동적 배열 삭제하는 방법
	delete[] arr;

	동적 할당 주의할 점
	- new를 했으면 delete를 해줘야 함 (생성했으면 삭제해줘야 함)
	- 만약 delete를 안 하면 평생 메모리가 쌓임, 진짜 계속 쌓이기만 함, 메모리 누수

*/
	
	